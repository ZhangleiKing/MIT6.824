package main

import (
"fmt"
"mapreduce"
"os"
"unicode"
"strings"
"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.

//对每个文件，处理其文件内容，最后输出一个元素为KeyValue的list
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function

	//文件内容的字符串切割
	f := func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	}
	words := strings.FieldsFunc(value, f) 

	//make创建keyValue数组切片
	kvPairs := make([]mapreduce.KeyValue, len(words))
	for _, word := range words {
		kvPairs = append(kvPairs, mapreduce.KeyValue{word, "1"})
	}

	return kvPairs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.

//key为单词，[]string为该单词所有的统计次数，对于每个key，相加所有的统计次数即为该单词出现的次数
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	sum := 0

	for _, value := range values {
		//string转int
		count, err := strconv.Atoi(value)
		//出错
		if err != nil {
			continue
		}
		sum += count
	}
	return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
